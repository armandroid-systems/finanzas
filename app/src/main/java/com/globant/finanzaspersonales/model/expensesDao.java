package com.globant.finanzaspersonales.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.globant.finanzaspersonales.model.expenses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPENSES".
*/
public class expensesDao extends AbstractDao<expenses, Long> {

    public static final String TABLENAME = "EXPENSES";

    /**
     * Properties of entity expenses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "idExpense");
        public final static Property IdBudget = new Property(1, long.class, "idBudget", false, "ID_BUDGET");
        public final static Property IdCategory = new Property(2, Long.class, "idCategory", false, "ID_CATEGORY");
        public final static Property IdTdc = new Property(3, Long.class, "idTdc", false, "ID_TDC");
        public final static Property Time = new Property(4, Integer.class, "time", false, "TIME");
        public final static Property Recurrent = new Property(5, Integer.class, "recurrent", false, "RECURRENT");
        public final static Property Active = new Property(6, Integer.class, "active", false, "ACTIVE");
    };

    private DaoSession daoSession;

    private Query<expenses> budgets_ExpenseToBudgetQuery;

    public expensesDao(DaoConfig config) {
        super(config);
    }
    
    public expensesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPENSES\" (" + //
                "\"idExpense\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_BUDGET\" INTEGER NOT NULL ," + // 1: idBudget
                "\"ID_CATEGORY\" INTEGER," + // 2: idCategory
                "\"ID_TDC\" INTEGER," + // 3: idTdc
                "\"TIME\" INTEGER," + // 4: time
                "\"RECURRENT\" INTEGER," + // 5: recurrent
                "\"ACTIVE\" INTEGER);"); // 6: active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPENSES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, expenses entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdBudget());
 
        Long idCategory = entity.getIdCategory();
        if (idCategory != null) {
            stmt.bindLong(3, idCategory);
        }
 
        Long idTdc = entity.getIdTdc();
        if (idTdc != null) {
            stmt.bindLong(4, idTdc);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        Integer recurrent = entity.getRecurrent();
        if (recurrent != null) {
            stmt.bindLong(6, recurrent);
        }
 
        Integer active = entity.getActive();
        if (active != null) {
            stmt.bindLong(7, active);
        }
    }

    @Override
    protected void attachEntity(expenses entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public expenses readEntity(Cursor cursor, int offset) {
        expenses entity = new expenses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idBudget
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // idCategory
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idTdc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // recurrent
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, expenses entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdBudget(cursor.getLong(offset + 1));
        entity.setIdCategory(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIdTdc(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRecurrent(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setActive(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(expenses entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(expenses entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "expenseToBudget" to-many relationship of budgets. */
    public List<expenses> _queryBudgets_ExpenseToBudget(long idBudget) {
        synchronized (this) {
            if (budgets_ExpenseToBudgetQuery == null) {
                QueryBuilder<expenses> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdBudget.eq(null));
                budgets_ExpenseToBudgetQuery = queryBuilder.build();
            }
        }
        Query<expenses> query = budgets_ExpenseToBudgetQuery.forCurrentThread();
        query.setParameter(0, idBudget);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCat_categoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCat_tdcDao().getAllColumns());
            builder.append(" FROM EXPENSES T");
            builder.append(" LEFT JOIN CAT_CATEGORY T0 ON T.\"ID_CATEGORY\"=T0.\"idCategory\"");
            builder.append(" LEFT JOIN CAT_TDC T1 ON T.\"ID_TDC\"=T1.\"idTdc\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected expenses loadCurrentDeep(Cursor cursor, boolean lock) {
        expenses entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        cat_category cat_category = loadCurrentOther(daoSession.getCat_categoryDao(), cursor, offset);
        entity.setCat_category(cat_category);
        offset += daoSession.getCat_categoryDao().getAllColumns().length;

        cat_tdc cat_tdc = loadCurrentOther(daoSession.getCat_tdcDao(), cursor, offset);
        entity.setCat_tdc(cat_tdc);

        return entity;    
    }

    public expenses loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<expenses> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<expenses> list = new ArrayList<expenses>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<expenses> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<expenses> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
