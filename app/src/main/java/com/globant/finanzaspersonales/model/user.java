package com.globant.finanzaspersonales.model;

import java.util.List;
import com.globant.finanzaspersonales.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class user {

    private Long id;
    private String name;
    private Float monthAmount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient userDao myDao;

    private List<cat_tdc> tdcCards;
    private List<budgets> userBudgets;

    public user() {
    }

    public user(Long id) {
        this.id = id;
    }

    public user(Long id, String name, Float monthAmount) {
        this.id = id;
        this.name = name;
        this.monthAmount = monthAmount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getMonthAmount() {
        return monthAmount;
    }

    public void setMonthAmount(Float monthAmount) {
        this.monthAmount = monthAmount;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<cat_tdc> getTdcCards() {
        if (tdcCards == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            cat_tdcDao targetDao = daoSession.getCat_tdcDao();
            List<cat_tdc> tdcCardsNew = targetDao._queryUser_TdcCards(id);
            synchronized (this) {
                if(tdcCards == null) {
                    tdcCards = tdcCardsNew;
                }
            }
        }
        return tdcCards;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTdcCards() {
        tdcCards = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<budgets> getUserBudgets() {
        if (userBudgets == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            budgetsDao targetDao = daoSession.getBudgetsDao();
            List<budgets> userBudgetsNew = targetDao._queryUser_UserBudgets(id);
            synchronized (this) {
                if(userBudgets == null) {
                    userBudgets = userBudgetsNew;
                }
            }
        }
        return userBudgets;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserBudgets() {
        userBudgets = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
