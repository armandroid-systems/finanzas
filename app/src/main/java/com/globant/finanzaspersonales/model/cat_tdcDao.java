package com.globant.finanzaspersonales.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.globant.finanzaspersonales.model.cat_tdc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAT_TDC".
*/
public class cat_tdcDao extends AbstractDao<cat_tdc, Long> {

    public static final String TABLENAME = "CAT_TDC";

    /**
     * Properties of entity cat_tdc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "idTdc");
        public final static Property IdUser = new Property(1, long.class, "idUser", false, "ID_USER");
        public final static Property TdcName = new Property(2, String.class, "tdcName", false, "TDC_NAME");
        public final static Property Credit = new Property(3, Float.class, "credit", false, "CREDIT");
        public final static Property Balance = new Property(4, Float.class, "balance", false, "BALANCE");
        public final static Property Active = new Property(5, Integer.class, "active", false, "ACTIVE");
    };

    private Query<cat_tdc> user_TdcCardsQuery;

    public cat_tdcDao(DaoConfig config) {
        super(config);
    }
    
    public cat_tdcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAT_TDC\" (" + //
                "\"idTdc\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_USER\" INTEGER NOT NULL ," + // 1: idUser
                "\"TDC_NAME\" TEXT," + // 2: tdcName
                "\"CREDIT\" REAL," + // 3: credit
                "\"BALANCE\" REAL," + // 4: balance
                "\"ACTIVE\" INTEGER);"); // 5: active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAT_TDC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, cat_tdc entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdUser());
 
        String tdcName = entity.getTdcName();
        if (tdcName != null) {
            stmt.bindString(3, tdcName);
        }
 
        Float credit = entity.getCredit();
        if (credit != null) {
            stmt.bindDouble(4, credit);
        }
 
        Float balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(5, balance);
        }
 
        Integer active = entity.getActive();
        if (active != null) {
            stmt.bindLong(6, active);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public cat_tdc readEntity(Cursor cursor, int offset) {
        cat_tdc entity = new cat_tdc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idUser
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tdcName
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // credit
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // balance
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, cat_tdc entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUser(cursor.getLong(offset + 1));
        entity.setTdcName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCredit(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setBalance(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setActive(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(cat_tdc entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(cat_tdc entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tdcCards" to-many relationship of user. */
    public List<cat_tdc> _queryUser_TdcCards(long idUser) {
        synchronized (this) {
            if (user_TdcCardsQuery == null) {
                QueryBuilder<cat_tdc> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdUser.eq(null));
                user_TdcCardsQuery = queryBuilder.build();
            }
        }
        Query<cat_tdc> query = user_TdcCardsQuery.forCurrentThread();
        query.setParameter(0, idUser);
        return query.list();
    }

}
