package com.globant.finanzaspersonales.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.globant.finanzaspersonales.model.cat_category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAT_CATEGORY".
*/
public class cat_categoryDao extends AbstractDao<cat_category, Long> {

    public static final String TABLENAME = "CAT_CATEGORY";

    /**
     * Properties of entity cat_category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "idCategory");
        public final static Property IdSonCategory = new Property(1, Long.class, "idSonCategory", false, "ID_SON_CATEGORY");
        public final static Property CategoryName = new Property(2, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Active = new Property(3, Integer.class, "active", false, "ACTIVE");
    };


    public cat_categoryDao(DaoConfig config) {
        super(config);
    }
    
    public cat_categoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAT_CATEGORY\" (" + //
                "\"idCategory\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_SON_CATEGORY\" INTEGER," + // 1: idSonCategory
                "\"CATEGORY_NAME\" TEXT," + // 2: categoryName
                "\"ACTIVE\" INTEGER);"); // 3: active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAT_CATEGORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, cat_category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idSonCategory = entity.getIdSonCategory();
        if (idSonCategory != null) {
            stmt.bindLong(2, idSonCategory);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(3, categoryName);
        }
 
        Integer active = entity.getActive();
        if (active != null) {
            stmt.bindLong(4, active);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public cat_category readEntity(Cursor cursor, int offset) {
        cat_category entity = new cat_category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idSonCategory
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, cat_category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdSonCategory(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActive(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(cat_category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(cat_category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
