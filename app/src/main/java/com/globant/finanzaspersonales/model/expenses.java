package com.globant.finanzaspersonales.model;

import com.globant.finanzaspersonales.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "EXPENSES".
 */
public class expenses {

    private Long id;
    private long idBudget;
    private Long idCategory;
    private Long idTdc;
    private Integer time;
    private Integer recurrent;
    private Integer active;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient expensesDao myDao;

    private cat_category cat_category;
    private Long cat_category__resolvedKey;

    private cat_tdc cat_tdc;
    private Long cat_tdc__resolvedKey;


    public expenses() {
    }

    public expenses(Long id) {
        this.id = id;
    }

    public expenses(Long id, long idBudget, Long idCategory, Long idTdc, Integer time, Integer recurrent, Integer active) {
        this.id = id;
        this.idBudget = idBudget;
        this.idCategory = idCategory;
        this.idTdc = idTdc;
        this.time = time;
        this.recurrent = recurrent;
        this.active = active;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExpensesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getIdBudget() {
        return idBudget;
    }

    public void setIdBudget(long idBudget) {
        this.idBudget = idBudget;
    }

    public Long getIdCategory() {
        return idCategory;
    }

    public void setIdCategory(Long idCategory) {
        this.idCategory = idCategory;
    }

    public Long getIdTdc() {
        return idTdc;
    }

    public void setIdTdc(Long idTdc) {
        this.idTdc = idTdc;
    }

    public Integer getTime() {
        return time;
    }

    public void setTime(Integer time) {
        this.time = time;
    }

    public Integer getRecurrent() {
        return recurrent;
    }

    public void setRecurrent(Integer recurrent) {
        this.recurrent = recurrent;
    }

    public Integer getActive() {
        return active;
    }

    public void setActive(Integer active) {
        this.active = active;
    }

    /** To-one relationship, resolved on first access. */
    public cat_category getCat_category() {
        Long __key = this.idCategory;
        if (cat_category__resolvedKey == null || !cat_category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            cat_categoryDao targetDao = daoSession.getCat_categoryDao();
            cat_category cat_categoryNew = targetDao.load(__key);
            synchronized (this) {
                cat_category = cat_categoryNew;
            	cat_category__resolvedKey = __key;
            }
        }
        return cat_category;
    }

    public void setCat_category(cat_category cat_category) {
        synchronized (this) {
            this.cat_category = cat_category;
            idCategory = cat_category == null ? null : cat_category.getId();
            cat_category__resolvedKey = idCategory;
        }
    }

    /** To-one relationship, resolved on first access. */
    public cat_tdc getCat_tdc() {
        Long __key = this.idTdc;
        if (cat_tdc__resolvedKey == null || !cat_tdc__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            cat_tdcDao targetDao = daoSession.getCat_tdcDao();
            cat_tdc cat_tdcNew = targetDao.load(__key);
            synchronized (this) {
                cat_tdc = cat_tdcNew;
            	cat_tdc__resolvedKey = __key;
            }
        }
        return cat_tdc;
    }

    public void setCat_tdc(cat_tdc cat_tdc) {
        synchronized (this) {
            this.cat_tdc = cat_tdc;
            idTdc = cat_tdc == null ? null : cat_tdc.getId();
            cat_tdc__resolvedKey = idTdc;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
